<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_myFileWrite" Id="{dba156e3-98ce-4a9e-ac3f-21c95468409b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_myFileWrite
VAR_INPUT
        //sSrcNetId               : T_AmsNetId;(* TwinCAT network address of the source file *)
        //sSrcPathName            : T_MaxString;(* Source file path and name *)
        sDestNetId              : T_AmsNetId;(* TwinCAT network address of the destination file *)
        sDestPathName           : T_MaxString; (* Destination file path and name *)
        bExecute                : BOOL; (* Rising edge start fb execution *)
        tTimeOut                : TIME := DEFAULT_ADS_TIMEOUT;(* Max. ADS timeout time *)		
		writeData				: ARRAY[1..1000] OF BYTE;

END_VAR
VAR_OUTPUT
        bBusy                   :BOOL;(* TRUE => File copy execution in progress, FALSE => File copy execution idle *)
 		bError                  :BOOL;(* TRUE => Error, FALSE => No error *)
		nErrId                  :UDINT;(* Error code *)
        //hSrcFile                 :UINT   := 0;(* File handle of the source file *)
		hDestFile               :UINT   := 0;(* File handle of the destination file *)
		writeDataDone			: BOOL:=FALSE;
END_VAR
VAR
        fbFileOpen              :FB_FileOpen;
        fbFileClose             :FB_FileClose;
        fbFileRead              :FB_FileRead;
        fbFileWrite             :FB_FileWrite;

        Step                    :DWORD;
        RisingEdge              :R_TRIG;

        buffWrite               : ARRAY[1..1000] OF BYTE;(* Buffer *)
		//cbReadLength            : UDINT := 0;
	fileWriteReached3			: BOOL;
	fileWriteReached4			: BOOL;
	fileWriteReached7			: BOOL;
	fileWriteReached8			: BOOL;
	fileWriteReached30			: BOOL;
	fileWriteReached31			: BOOL;
	fileWriteReached8_step50	: BOOL;
	fileWriteReached50_2step30	: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//buffWrite[1]:=F_ToASC(WORD_TO_STRING(5));
//buffWrite[2]:=F_ToASC(WORD_TO_STRING(1));
//buffWrite[3]:=F_ToASC(WORD_TO_STRING(52));
//buffWrite[4]:=F_ToASC(WORD_TO_STRING(53));
//buffWrite[5]:=F_ToASC(WORD_TO_STRING(54));

buffWrite:=writeData;					//////////////////////////////////////////////////////////////
(*buffWrite[1]:=2;
buffWrite[2]:=49;
buffWrite[3]:=48;
buffWrite[4]:=13;
buffWrite[5]:=10;
buffWrite[6]:=13;
buffWrite[7]:=10;
//buffWrite[8]:=26;
//buffWrite[9]:=26;//23 //25 //05
*)
RisingEdge(CLK:=bExecute);

CASE Step OF
        0:      (* Idle state *)
         IF RisingEdge.Q THEN
                        bBusy := TRUE;
                        bError:= FALSE;
                        nErrId:=0;
                        Step := 3;
                        //cbReadLength:=0;
                        //hSrcFile:=0;
                        hDestFile:=0;
                END_IF

        1:      (* Open source file *)
		Step := Step + 1;

        2:
		Step := Step + 1;

        3:      (* Open destination file *)
         fbFileOpen( bExecute := FALSE );
                fbFileOpen( sNetId := sDestNetId, sPathName := sDestPathName,
                        nMode := FOPEN_MODEWRITE OR FOPEN_MODEBINARY,
                        ePath := PATH_GENERIC, tTimeout := tTimeOut, bExecute := TRUE );
                Step := Step+1;
				fileWriteReached3:=TRUE;
        4:
                fbFileOpen( bExecute := FALSE );
                IF NOT fbFileOpen.bBusy THEN
                        IF fbFileOpen.bError THEN
                                nErrId := fbFileOpen.nErrId;
                                bError := TRUE;
                                Step := 50;
                        ELSE
                                hDestFile := fbFileOpen.hFile;
                                Step := Step + 1;
                        END_IF
                END_IF
				fileWriteReached4:=TRUE;

        5:      (* Read data from source file *)
		Step := Step + 1;

        6:
		Step := Step + 1;
			
        7:      (* Write data to destination file *)
         fbFileWrite( bExecute := FALSE );
                fbFileWrite( sNetId:=sDestNetId, hFile:=hDestFile,
                        pWriteBuff:= ADR(buffWrite), cbWriteLen:= SIZEOF(buffWrite),//cbReadLength,
                        bExecute:=TRUE, tTimeout:=tTimeOut );
                Step := Step + 1;
				fileWriteReached7:=TRUE;
				
        8:
                fbFileWrite( bExecute := FALSE );
                IF NOT fbFileWrite.bBusy THEN
						writeDataDone:=TRUE;								////////////////////////////////////////////////
                        IF fbFileWrite.bError THEN
                                nErrId := fbFileWrite.nErrId;
                                bError := TRUE;
                                Step := 50;
                        ELSE
                                //IF fbFileRead.bEOF THEN (* Check if the EOF flag ist set *)
								IF fileWriteReached7 THEN
										Step := 50;(* Cleanup: close the destination and source files *)
										fileWriteReached8_step50:=TRUE;
								ELSE
										Step := 7; (* Repeat reading/writing *)
								END_IF
                        END_IF
						ELSE									//////////////////////////////////////////////////////
							writeDataDone:=FALSE;			    //////////////////////////////////////////////////////////
                END_IF
				fileWriteReached8:=TRUE;

        30:     (* Close the destination file *)
				 fbFileClose( bExecute := FALSE );
						fbFileClose( sNetId:=sDestNetId, hFile:=hDestFile, bExecute:=TRUE, tTimeout:=tTimeOut );
						Step := Step + 1;
						fileWriteReached30:=TRUE;
        31:
                fbFileClose( bExecute := FALSE );
                IF NOT fbFileClose.bBusy THEN
                        IF fbFileClose.bError THEN
                                nErrId := fbFileClose.nErrId;
                                bError := TRUE;
                        END_IF
                        Step := 50;
                        hDestFile := 0;
                END_IF
				fileWriteReached31:=TRUE;

        40: (* Close source file *)
		Step := 50;
		
        50: (* Error or ready => Cleanup *)
         IF ( hDestFile <> 0 ) THEN
                        Step := 30; (* Close the destination file*)
						fileWriteReached50_2step30:=TRUE;
         	ELSE
                        Step := 0;      (* Ready *)
                        bBusy := FALSE;
         END_IF
		
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_myFileWrite">
      <LineId Id="213" Count="1" />
      <LineId Id="216" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="292" Count="3" />
      <LineId Id="336" Count="2" />
      <LineId Id="340" Count="0" />
      <LineId Id="38" Count="14" />
      <LineId Id="386" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="70" Count="6" />
      <LineId Id="230" Count="0" />
      <LineId Id="77" Count="11" />
      <LineId Id="232" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="179" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="110" Count="5" />
      <LineId Id="234" Count="1" />
      <LineId Id="116" Count="2" />
      <LineId Id="383" Count="0" />
      <LineId Id="119" Count="5" />
      <LineId Id="339" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="126" Count="3" />
      <LineId Id="384" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="131" Count="4" />
      <LineId Id="239" Count="0" />
      <LineId Id="136" Count="9" />
      <LineId Id="241" Count="0" />
      <LineId Id="146" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="162" Count="2" />
      <LineId Id="333" Count="0" />
      <LineId Id="167" Count="4" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>